#!/bin/bash
#
# install an build the latest ESP8266 OPEN SDK
# ASSUME Ubuntu 14.04LTS
# Mike Gore May 2015

sep()
{
	echo "====================================================="
	echo
	echo
	echo
}

# Install required packages
update_packages()
{
	sudo apt-get install git make automake autoconf build-essential \
		gperf bison flex \
		texinfo libtool libncurses5-dev \
		wget gawk python-serial libexpat1-dev  \
		libc6-dev \
		gcc g++ \
		unrar \
		python sed 
	sep
}

# What: Echo ERROR: and arguments
# Arguments: $*
# Returns: Exit 1
# Example:
# fatal we failed 
fatal()
{
	echo "$*"; exit 1;
}

# What: Display the absolute path of a file - uses echo
# Arguments: path
# Notes: if argument is -bash then return absolute of current directory
# Example:
# absolute ~/file.txt
absolute()
{
	if [ -z "$1" ]
	then
		fatal " $FUNCNAME: missing argument: [$0]"
	fi

	# FIXME if the argument is -bash, then is this the correct course of action?
	if [ "$1" = "-bash" ]
	then
		echo -n "$(readlink -f \"`pwd`\")"
		return
	fi
	# Our full path name
	echo -n "$(readlink -f "$1")"
}


# What: Change directory and verify we actually end up there
# Argument: directory
# Notes: Useful if verifying permission of traget directory
# Example:
# check_cd /tmp/projects
check_cd()
{
	declare DIR="$1"
	echo "check_cd $DIR"
	declare P="`absolute \"$DIR\"`"
	if [ -z "$P" ]
	then
		fatal "$FUNCNAME: No directory"
	fi

    cd "$P"

	declare PWD=$(pwd)
	if [ "$PWD" != "$P" ]
	then
			fatal "Can NOT change directory to [$P]"
	fi
}


# Verify a list of directories exist
check_dir()
{
	declare i
	for i in $*
	do
		if [ ! -d "$i" ]
		then
			fatal "Directory:[$i] missing"
		fi
	done
}

# Verify a list of files exist
check_files()
{
	declare i
	for i in $*
	do
		if [ ! -f "$i" ]
		then
			fatal "Directory:[$i] missing"
		fi
	done
}

# Set SDK paths 
set_path()
{
	# See: https://nurdspace.nl/ESP8266/First_setup
	# https://github.com/esp8266/esp8266-wiki/wiki/Toolchain
	export ROOT_DIR="/opt/Espressif"
	export SDK_HOME="$ROOT_DIR/esp-open-sdk"
	export SDK_BIN="$SDK_HOME/xtensa-lx106-elf/bin"
	export PATH="$SDK_BIN:$PATH"

	echo "ROOT_DIR[$ROOT_DIR]"
	echo "SDK_HOME[$SDK_HOME]"
	echo "SDK_BIN[$SDK_BIN]"
	sep
}

# Make a script that will set search paths
make_path()
{
	set_path
	cat <<EOF >"$SDK_HOME/setpath"
#!/bin/bash
#
export ROOT_DIR="$ROOT_DIR"
export SDK_HOME="$SDK_HOME/sdk"
export SDK_BIN="$SDK_BIN"
export PATH="\$SDK_BIN:\$PATH"
EOF
	chmod 755 "$SDK_HOME/setpath"
	sep
}

# DOanload and build Open SDK
install_open_sdk()
{
	echo Installing Open SDK
	check_cd $ROOT_DIR
	echo Target is $SDK_HOME
	declare DIR=$(basename $SDK_HOME)
	echo "DIR:[$DIR]"
	get_git https://github.com/pfalcon "$DIR"
	check_cd $SDK_HOME
	make STANDALONE=y

	check_dir $SDK_HOME/esptool
	sep
}

# Add a few tools
add_tools()
{
	check_dir $SDK_HOME/sdk/bin
	cat $SDK_HOME/sdk/bin/blank.bin \
		$SDK_HOME/sdk/bin/blank.bin \
		$SDK_HOME/sdk/bin/blank.bin  >> $SDK_HOME/sdk/bin/clear_eep.bin
	get_git https://github.com/themadinventor esptool
	cp -p esptool/*.py $SDK_HOME/sdk/tools
	chmod 755 $SDK_HOME/sdk/tools/*

}

#  ==============================================================

# Now execute the shell functions to do the work
set_path
update_packages
install_open_sdk
add_tools
make_path
